apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

project.group = 'mirrg.lithium'
project.archivesBaseName = 'mirrg.applications.service.pwi'
version = '0.0.7'

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(AbstractCompile)*.options*.encoding = tasks.withType(GroovyCompile)*.groovyOptions*.encoding = 'UTF-8'

jar {
	manifest {
		attributes 'Implementation-Title': 'Gradle Quickstart'
		attributes 'Implementation-Version': version
		attributes 'Main-Class': 'mirrg.applications.service.pwi.Main'
	}
}

task latestJar(type: Copy, dependsOn:jar) {
    from jar.archivePath
    into jar.destinationDir
    rename project.archivesBaseName + "-" + project.version + ".jar", project.archivesBaseName + ".jar"
    latestJar.metaClass.archivePath = "" + jar.destinationDir + "/" + project.archivesBaseName + ".jar"
}

task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task universalZip(type: Zip, dependsOn:latestJar) {
	classifier = 'universal'
	from latestJar.archivePath
	into ("http_home") {
		from file("http_home")
	}
	from file("default.pwi.properties")
}

javadoc {
	options.charSet = 'UTF-8'
	options.encoding = 'UTF-8'
}

artifacts {
	archives sourcesJar
	archives javadocJar
	archives universalZip
}

repositories {

	mavenCentral()

	maven {
		url '../maven'
	}

}

dependencies {
	//compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
	testCompile group: 'junit', name: 'junit', version: '4.+'
	compile group: 'mirrg.lithium', name: 'mirrg.lithium.properties', version: '3.+'
	compile group: 'mirrg.lithium', name: 'mirrg.lithium.struct', version: '1.+'
	compile group: 'mirrg.lithium', name: 'mirrg.lithium.lang', version: '1.0.2+'
}

uploadArchives {
	repositories {

		flatDir {
			dirs 'repos'
		}

		//mavenDeployer {
		//	pom.artifactId = project.archivesBaseName
		//	repository(url: 'file://localhost/' + file('../maven').getAbsolutePath())
		//}

	}
}

jar {
	from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}
